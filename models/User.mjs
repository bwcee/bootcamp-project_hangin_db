import mongoose from "mongoose";
const { Schema, model } = mongoose;

/* 
1. {timestamps: true} option creates a createdAt and updatedAt field on our models that contain timestamps which will get automatically updated when our model changes. 
2. nil data validation done here... all will be done at the front end when asking for input... 
3. mongoDB documents haf 16MB limit... so pic below shld be limited to 100kb?
4. requests field holds requests frm other folks to be accountability partner for particular tasks... no need for ownerIdh here cos alr in tasks model... this field will also see a lot of updates:  when requests made, taskIds will be created; when user either accepts or rejects requests, taskIds will be deleted... at the moment, no ability to block certain users or tasks from making repeat requests...  
5. useful ref for schema design (https://www.mongodb.com/blog/post/6-rules-of-thumb-for-mongodb-schema-design-part-1)
*/
const userSchema = new Schema(
  {
    name: { type: String, lowercase: true, trim: true },
    email: {
      type: String,
      lowercase: true,
      required: true,
      unique: true,
      trim: true,
    },
    password: { type: String, required: true, trim: true },
    pic: { type: Buffer }, // create public folder and use path to the image
    bio: { type: String, lowercase: true, trim: true },
    payment: { type: String, lowercase: true, trim: true },
    postal: {
      type: String,
      required: true,
      trim: true,
      enum: {
        values: [
          "01",
          "02",
          "03",
          "04",
          "05",
          "06",
          "07",
          "08",
          "09",
          "10",
          "11",
          "12",
          "13",
          "14",
          "15",
          "16",
          "17",
          "18",
          "19",
          "20",
          "21",
          "22",
          "23",
          "24",
          "25",
          "26",
          "27",
          "28",
          "29",
          "30",
          "31",
          "32",
          "33",
          "34",
          "35",
          "36",
          "37",
          "38",
          "39",
          "40",
          "41",
          "42",
          "43",
          "44",
          "45",
          "46",
          "47",
          "48",
          "49",
          "50",
          "51",
          "52",
          "53",
          "54",
          "55",
          "56",
          "57",
          "58",
          "59",
          "60",
          "61",
          "62",
          "63",
          "64",
          "65",
          "66",
          "67",
          "68",
          "69",
          "70",
          "71",
          "72",
          "73",
          "75",
          "76",
          "77",
          "78",
          "79",
          "80",
          "81",
          "82",
        ],
        message: "{VALUE} is not a valid postal code",
      },
    },
    requests: [{ type: Schema.Types.ObjectId, ref: "Task" }],
  },
  { timestamps: true }
);

export default model("User", userSchema);
